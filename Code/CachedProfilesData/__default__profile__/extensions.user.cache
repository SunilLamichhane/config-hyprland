{"input":{"location":{"$mid":1,"external":"vscode-userdata:/home/linus/.vscode/extensions/extensions.json","path":"/home/linus/.vscode/extensions/extensions.json","scheme":"vscode-userdata"},"mtime":1722852514728,"profile":true,"profileScanOptions":{"bailOutWhenFileNotFound":true},"type":1,"excludeObsolete":true,"validate":true,"productVersion":"1.92.0","productDate":"2024-07-31T23:26:45.634Z","productCommit":"b1c0a14de1414fcdaa400695b4db1c0799bc3124","devMode":false,"language":"en","translations":{}},"result":[{"type":1,"identifier":{"id":"anseki.vscode-color","uuid":"37d7747f-e652-4eac-83de-f2939f7e2121"},"manifest":{"name":"vscode-color","version":"0.4.5","displayName":"Color Picker","description":"Helper with GUI to generate color codes such as CSS color notations.","keywords":["color","picker","convert","palette","dialog"],"categories":["Other"],"icon":"icon.png","badges":[{"url":"https://vsmarketplacebadge.apphb.com/version-short/anseki.vscode-color.svg","href":"https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color","description":"VS Marketplace"},{"url":"https://vsmarketplacebadge.apphb.com/installs-short/anseki.vscode-color.svg","href":"https://marketplace.visualstudio.com/items?itemName=anseki.vscode-color","description":"installs"},{"url":"https://img.shields.io/github/issues/anseki/vscode-color.svg","href":"https://github.com/anseki/vscode-color/issues","description":"GitHub issues"},{"url":"https://img.shields.io/david/anseki/vscode-color.svg","href":"package.json","description":"David"},{"url":"https://img.shields.io/badge/license-MIT-blue.svg","href":"LICENSE-MIT","description":"license"}],"qna":"https://github.com/anseki/vscode-color/issues","main":"./extension","extensionMain":"./lib/color-helper","engines":{"vscode":"^0.10.1"},"dependencies":{"comma-separated-values":"^3.6.4","electron-prebuilt":"0.37.3","js-yaml":"^3.8.3","process-bridge":"^0.3.6"},"devDependencies":{"asar":"^0.11.0","clean-css":"^4.0.11","grunt":"^0.4.5","grunt-contrib-clean":"^1.0.0","grunt-contrib-copy":"^0.8.2","grunt-task-helper":"^0.3.9","htmlclean":"^3.0.2","jquery":"^2.2.2","stats-filelist":"^1.0.0","vscode":"0.10.x"},"contributes":{"commands":[{"command":"extension.colorHelper.pick","title":"Pick Color"},{"command":"extension.colorHelper.convert","title":"Convert Color"}],"keybindings":[{"command":"extension.colorHelper.pick","key":"alt+c p","when":"editorTextFocus"},{"command":"extension.colorHelper.convert","key":"alt+c c","when":"editorTextFocus"}],"configuration":{"type":"object","title":"Color Picker configuration","properties":{"colorHelper.pickerForm":{"type":"string","default":"default","description":"A name of preset package that switches UI and features. Allowed values are \"default\", \"largePalette\", \"simple\", \"compact\", \"compact2\" or \"byPalette\"."},"colorHelper.storeDir":{"type":"string","default":"","description":"A path to directory that contains your color palettes. For information about color palettes, see `README.md` that is found in that directory."},"colorHelper.resident":{"type":"boolean","default":false,"description":"Stands by for a quick response. After the dialog box is opened, it stays in memory even after it is closed until VS Code is exited (or VS Code might unload it)."},"colorHelper.formatsOrder":{"type":"array","default":[],"description":"An array that indicates the order of formats in UI (e.g. drop-down list). Allowed items are \"hsb\", \"hsl\", \"hwb\", \"rgb\", \"hex\", \"named\", \"cmyk\" or \"gray\". This array doesn't have to contain all formats. The formats that are not contained in the array are moved to the top of the list in UI automatically when it was used. If you want to make the list static, specify all formats in the order you desire, e.g. [\"hsb\", \"hsl\", \"hwb\", \"rgb\", \"hex\", \"named\", \"cmyk\", \"gray\"]."},"colorHelper.disableGpu":{"type":"number","default":-1,"description":"1: Disable GPU / 0: System default / -1: Auto"},"colorHelper.disableShadow":{"type":"boolean","default":false,"description":"Disable drop shadow effect."},"colorHelper.disableTransparent":{"type":"boolean","default":false,"description":"Disable transparent window."}}}},"activationEvents":["onCommand:extension.colorHelper.pick","onCommand:extension.colorHelper.convert"],"homepage":"https://github.com/anseki/vscode-color","repository":{"type":"git","url":"https://github.com/anseki/vscode-color.git"},"bugs":{"url":"https://github.com/anseki/vscode-color/issues"},"license":"MIT","publisher":"anseki"},"location":{"$mid":1,"path":"/home/linus/.vscode/extensions/anseki.vscode-color-0.4.5","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","publisherDisplayName":"anseki","metadata":{"installedTimestamp":1722530304711,"pinned":false,"source":"gallery","id":"37d7747f-e652-4eac-83de-f2939f7e2121","publisherId":"438bb7a7-6997-47eb-b23b-72c3ba845702","publisherDisplayName":"anseki","targetPlatform":"undefined","updated":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"kamikillerto.vscode-colorize","uuid":"445ba381-f232-4150-9056-d790bd76d698"},"manifest":{"name":"vscode-colorize","displayName":"colorize","description":"A vscode extension to help visualize css colors in files.","version":"0.11.1","publisher":"kamikillerto","license":"Apache-2.0","icon":"assets/logo.png","engines":{"vscode":"^1.54.0"},"categories":["Other"],"keywords":["color","css","hexa","hsl","rgb","preprocessor"],"repository":{"type":"git","url":"https://github.com/kamikillerto/vscode-colorize.git"},"bugs":{"url":"https://github.com/kamikillerto/vscode-colorize/issues"},"homepage":"https://github.com/kamikillerto/vscode-colorize/blob/master/README.MD","galleryBanner":{"theme":"light"},"activationEvents":["*"],"main":"./out/src/extension","contributes":{"configuration":{"title":"Colorize","properties":{"colorize.languages":{"default":["css","sass","scss","less","postcss","sss","stylus","xml","svg"],"title":"Colorize files with these languages","type":"array","markdownDescription":"Configure a list of languages that should be colorized. A list of languages can be find at https://code.visualstudio.com/docs/languages/identifiers. You can learn about languages at https://code.visualstudio.com/docs/languages/overview."},"colorize.include":{"type":"array","markdownDescription":"Configure glob patterns for including files and folders. By default Colorize is enable for files matching one the languages defined in the `colorize.languages` config, with this config you can enable colorize for other files or folders. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).","default":["**/*.css","**/*.scss","**/*.sass","**/*.less","**/*.styl"],"scope":3,"additionalProperties":{"anyOf":[{"type":"array","properties":{"when":{"type":"string","pattern":"\\w*\\$\\(basename\\)\\w*","default":"$(basename).ext","description":"Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name."}}}]}},"colorize.exclude":{"type":"array","markdownDescription":"Configure glob patterns for excluding files and folders. Colorize will not colorized colors in these files and folders and it'll also not search for variables inside. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).","default":["**/.git","**/.svn","**/.hg","**/CVS","**/.DS_Store","**/.git","**/node_modules","**/bower_components","**/tmp","**/dist","**/tests"],"scope":3,"additionalProperties":{"anyOf":[{"type":"array","properties":{"when":{"type":"string","pattern":"\\w*\\$\\(basename\\)\\w*","default":"$(basename).ext","description":"Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name."}}}]}},"colorize.hide_current_line_decorations":{"title":"Hide current line decorations","default":true,"type":"boolean","markdownDescription":"Hide colors for the current line. Set to `false` to turn it off"},"colorize.colorized_variables":{"$schema":"http://json-schema.org/draft-07/schema#","default":["CSS"],"items":{"enum":["CSS","SASS","LESS","STYLUS"],"description":"You should enter a valid extractor","uniqueItems":true},"title":"Extract these type of variables","type":"array","markdownDescription":"You can specified the type of variables that should be colorized by the extension."},"colorize.decoration_type":{"title":"Type of decoration","type":"string","enum":["background","underline"],"default":"background"},"colorize.colorized_colors":{"$schema":"http://json-schema.org/draft-07/schema#","default":["BROWSERS_COLORS","HEXA","RGB","HSL"],"items":{"enum":["BROWSERS_COLORS","HEXA","RGB","HSL","ARGB"],"description":"You should enter a valid extractor","uniqueItems":true},"title":"Colorize these type of color","type":"array","markdownDescription":"You can specified the type of color that should be colorized by the extension.\nAvailable colors are:\n* `HEXA`: for hexadecimal colors: `#RGB`, `#RGBA`, `#RRGGBB`, `#RRGGBBAA`, `0xRGB`, `0xRGBA`, `0xRRGGBB` or `0xRRGGBBAA`\n* `ARGB`: for argb colors: `#RGB`, `#ARGB`, `#RRGGBB` or `#AARRGGBB`\n* `RGB`: for rgb colors: `rgb(r,g,b)` or `rgba(r,g,b,a)`\n* `HSL`: for HSL colors: `hsl(h,s,l)` or `hsla(h,s,l,a)`\n* `BROWSERS_COLORS`: for native browser's colors like `white`, `red`, `blue`..."},"colorize.enable_search_variables":{"title":"Enable the search for variables at opening time","default":true,"type":"boolean","markdownDescription":"When vscode starts, Colorize fetch all files targeted by the settings `colorize.include` and `colorize.languages` but not the ones targeted by the setting `colorize.exclude`. When the fetch is done, colorize open and parse all files searching for variables. That way variables will be colorized in every files. _⚠️ this setting can slown down your editor a little at opening time, read this [issue](https://github.com/KamiKillertO/vscode-colorize/issues/174) to learn more about it._"}}}},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","lint":"eslint .","test":"npm run vscode:prepublish; node ./out/test/runTest.js"},"devDependencies":{"@types/chai":"^4.2.17","@types/mocha":"^8.2.2","@types/node":"^12.0.0","@types/vscode":"^1.54.0","@typescript-eslint/eslint-plugin":"^4.22.0","@typescript-eslint/parser":"^4.22.0","chai":"^4.3.4","eslint":"^7.25.0","mocha":"^8.3.2","typescript":"^3.9.3","vscode-test":"^1.5.2"},"dependencies":{"glob-to-regexp":"^0.4.1"}},"location":{"$mid":1,"path":"/home/linus/.vscode/extensions/kamikillerto.vscode-colorize-0.11.1","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","publisherDisplayName":"kamikillerto","metadata":{"installedTimestamp":1722530343335,"pinned":false,"source":"gallery","id":"445ba381-f232-4150-9056-d790bd76d698","publisherId":"d4ae7698-aa41-4455-92f8-cbb52b3d5004","publisherDisplayName":"kamikillerto","targetPlatform":"undefined","updated":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"fireblast.hyprlang-vscode","uuid":"62fd8ad9-1324-499c-9d49-d2f2d14e4db0"},"manifest":{"name":"hyprlang-vscode","displayName":"Hyprlang","description":"Hyprlang syntax highlighting","icon":"hyprland.png","version":"0.0.1","license":"MIT","publisher":"fireblast","repository":{"url":"https://github.com/TheFireBlast/hyprlang-vscode"},"engines":{"vscode":"^1.86.0"},"categories":["Programming Languages"],"activationEvents":[],"main":"./out/extension.js","contributes":{"languages":[{"id":"hyprlang","filenamePatterns":["**/.config/hypr/**/*.conf"],"configuration":"./language-configuration.json","icon":{"dark":"hyprland.png","light":"hyprland.png"}}],"grammars":[{"language":"hyprlang","scopeName":"source.hyprlang","path":"./syntaxes/hyprlang.tmGrammar.json"}]},"scripts":{"vscode:prepublish":"pnpm run compile","compile":"tsc -p ./","watch":"tsc -watch -p ./","pretest":"pnpm run compile && pnpm run lint","lint":"eslint src --ext ts","test":"vscode-test","package":"pnpm vsce package --no-dependencies","publish":"pnpm vsce publish --no-dependencies"},"devDependencies":{"@types/vscode":"^1.86.0","@types/mocha":"^10.0.6","@types/node":"18.x","@typescript-eslint/eslint-plugin":"^6.19.1","@typescript-eslint/parser":"^6.19.1","eslint":"^8.56.0","typescript":"^5.3.3","@vscode/test-cli":"^0.0.4","@vscode/test-electron":"^2.3.9"}},"location":{"$mid":1,"path":"/home/linus/.vscode/extensions/fireblast.hyprlang-vscode-0.0.1","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","publisherDisplayName":"FireBlast","metadata":{"installedTimestamp":1722659303904,"pinned":false,"source":"gallery","id":"62fd8ad9-1324-499c-9d49-d2f2d14e4db0","publisherId":"5eda0c61-b10e-495d-b771-3188cb472abb","publisherDisplayName":"FireBlast","targetPlatform":"undefined","updated":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"haskell.haskell","uuid":"aead9e6c-3483-4ce4-a09f-843e25ce696f"},"manifest":{"name":"haskell","displayName":"Haskell","description":"Haskell language support powered by the Haskell Language Server","version":"2.4.4","license":"MIT","publisher":"haskell","engines":{"vscode":"^1.88.0"},"keywords":["language","haskell","cabal","stack","lsp","multi-root ready"],"homepage":"https://github.com/haskell/vscode-haskell","repository":"https://github.com/haskell/vscode-haskell.git","bugs":{"url":"https://github.com/haskell/vscode-haskell/issues"},"categories":["Programming Languages","Formatters","Linters","Other"],"icon":"images/hls-logo.png","galleryBanner":{"color":"#22172A","theme":"dark"},"activationEvents":["onLanguage:haskell","onLanguage:literate haskell"],"main":"./dist/extension","contributes":{"languages":[{"id":"haskell","aliases":["Haskell","haskell"],"extensions":[".hs"]},{"id":"literate haskell","aliases":["Literate Haskell","literate Haskell"],"extensions":[".lhs"]}],"configuration":{"type":"object","title":"Haskell","properties":{"haskell.formattingProvider":{"scope":"resource","type":"string","enum":["brittany","floskell","fourmolu","ormolu","stylish-haskell","none"],"default":"ormolu","description":"The formatter to use when formatting a document or range. Ensure the plugin is enabled."},"haskell.openDocumentationInHackage":{"scope":"resource","type":"boolean","default":true,"description":"When opening 'Documentation' for external libraries, open in hackage by default. Set to false to instead open in vscode."},"haskell.openSourceInHackage":{"scope":"resource","type":"boolean","default":true,"description":"When opening 'Source' for external libraries, open in hackage by default. Set to false to instead open in vscode."},"haskell.trace.server":{"scope":"resource","type":"string","enum":["off","messages","verbose"],"default":"off","description":"Traces the communication between VS Code and the language server."},"haskell.trace.client":{"scope":"resource","type":"string","enum":["off","error","info","debug"],"default":"info","description":"Sets the log level in the client side."},"haskell.logFile":{"scope":"resource","type":"string","default":"","description":"If set, redirects the logs to a file."},"haskell.releasesURL":{"scope":"resource","type":"string","default":"","description":"An optional URL to override where ghcup checks for HLS-GHC compatibility list (usually at: https://raw.githubusercontent.com/haskell/ghcup-metadata/master/hls-metadata-0.0.1.json)"},"haskell.metadataURL":{"scope":"resource","type":"string","default":"","description":"An optional URL to override where ghcup checks for tool download info (usually at: https://raw.githubusercontent.com/haskell/ghcup-metadata/master/ghcup-0.0.7.yaml)"},"haskell.releasesDownloadStoragePath":{"scope":"resource","type":"string","default":"","markdownDescription":"An optional path where downloaded metadata will be stored. Check the default value [here](https://github.com/haskell/vscode-haskell#downloaded-binaries)"},"haskell.serverExecutablePath":{"scope":"machine-overridable","type":"string","default":"","markdownDescription":"Manually set a language server executable. Can be something on the $PATH or the full path to the executable itself. Works with `~,` `${HOME}` and `${workspaceFolder}`."},"haskell.serverExtraArgs":{"scope":"resource","type":"string","default":"","markdownDescription":"Pass additional arguments to the language server."},"haskell.ghcupExecutablePath":{"scope":"resource","type":"string","default":"","markdownDescription":"Manually set a ghcup executable path."},"haskell.serverEnvironment":{"scope":"resource","type":"object","default":{},"markdownDescription":"Define environment variables for the language server."},"haskell.promptBeforeDownloads":{"scope":"machine","type":"boolean","default":"true","markdownDescription":"Prompt before performing any downloads."},"haskell.manageHLS":{"scope":"resource","type":"string","default":"PATH","description":"How to manage/find HLS installations.","enum":["GHCup","PATH"],"enumDescriptions":["Will use ghcup and manage Haskell toolchain in the default location (usually '~/.ghcup')","Discovers HLS and other executables in system PATH"]},"haskell.toolchain":{"scope":"resource","type":"object","default":{},"description":"When manageHLS is set to GHCup, this can overwrite the automatic toolchain configuration with a more specific one. When a tool is omitted, the extension will manage the version (for 'ghc' we try to figure out the version the project requires). The format is '{\"tool\": \"version\", ...}'. 'version' accepts all identifiers that 'ghcup' accepts."},"haskell.upgradeGHCup":{"scope":"resource","type":"boolean","default":true,"description":"Whether to upgrade GHCup automatically when 'manageHLS' is set to 'GHCup'."},"haskell.checkProject":{"scope":"resource","type":"boolean","default":true,"description":"Whether to typecheck the entire project on load. It could drive to bad performance in large projects."},"haskell.sessionLoading":{"scope":"resource","type":"string","enum":["singleComponent","multipleComponents"],"default":"singleComponent","description":"Preferred approach for loading package components. Setting this to 'multiple components' (EXPERIMENTAL) allows the build tool (such as `cabal` or `stack`) to [load multiple components at once](https://github.com/haskell/cabal/pull/8726), which is a significant improvement.","enumDescriptions":["Always load only a single component at a time. This is the most reliable option if you encountered any issues with the other options.","Prefer a multiple component session, if the build tool supports it. At the moment, only `cabal` supports multiple components session loading. If the `cabal` version does not support loading multiple components at once, we gracefully fall back to \"singleComponent\" mode."]},"haskell.maxCompletions":{"scope":"resource","default":40,"type":"integer","description":"Maximum number of completions sent to the editor."},"haskell.plugin.alternateNumberFormat.globalOn":{"default":true,"description":"Enables alternateNumberFormat plugin","scope":"resource","type":"boolean"},"haskell.plugin.cabal-fmt.config.path":{"default":"cabal-fmt","markdownDescription":"Set path to 'cabal-fmt' executable","scope":"resource","type":"string"},"haskell.plugin.cabal-gild.config.path":{"default":"cabal-gild","markdownDescription":"Set path to 'cabal-gild' executable","scope":"resource","type":"string"},"haskell.plugin.cabal.codeActionsOn":{"default":true,"description":"Enables cabal code actions","scope":"resource","type":"boolean"},"haskell.plugin.cabal.completionOn":{"default":true,"description":"Enables cabal completions","scope":"resource","type":"boolean"},"haskell.plugin.cabal.diagnosticsOn":{"default":true,"description":"Enables cabal diagnostics","scope":"resource","type":"boolean"},"haskell.plugin.callHierarchy.globalOn":{"default":true,"description":"Enables callHierarchy plugin","scope":"resource","type":"boolean"},"haskell.plugin.changeTypeSignature.globalOn":{"default":true,"description":"Enables changeTypeSignature plugin","scope":"resource","type":"boolean"},"haskell.plugin.class.codeActionsOn":{"default":true,"description":"Enables class code actions","scope":"resource","type":"boolean"},"haskell.plugin.class.codeLensOn":{"default":true,"description":"Enables class code lenses","scope":"resource","type":"boolean"},"haskell.plugin.eval.config.diff":{"default":true,"markdownDescription":"Enable the diff output (WAS/NOW) of eval lenses","scope":"resource","type":"boolean"},"haskell.plugin.eval.config.exception":{"default":false,"markdownDescription":"Enable marking exceptions with `*** Exception:` similarly to doctest and GHCi.","scope":"resource","type":"boolean"},"haskell.plugin.eval.globalOn":{"default":true,"description":"Enables eval plugin","scope":"resource","type":"boolean"},"haskell.plugin.explicit-fields.globalOn":{"default":true,"description":"Enables explicit-fields plugin","scope":"resource","type":"boolean"},"haskell.plugin.explicit-fixity.globalOn":{"default":true,"description":"Enables explicit-fixity plugin","scope":"resource","type":"boolean"},"haskell.plugin.fourmolu.config.external":{"default":false,"markdownDescription":"Call out to an external \"fourmolu\" executable, rather than using the bundled library.","scope":"resource","type":"boolean"},"haskell.plugin.fourmolu.config.path":{"default":"fourmolu","markdownDescription":"Set path to executable (for \"external\" mode).","scope":"resource","type":"string"},"haskell.plugin.gadt.globalOn":{"default":true,"description":"Enables gadt plugin","scope":"resource","type":"boolean"},"haskell.plugin.ghcide-code-actions-bindings.globalOn":{"default":true,"description":"Enables ghcide-code-actions-bindings plugin","scope":"resource","type":"boolean"},"haskell.plugin.ghcide-code-actions-fill-holes.globalOn":{"default":true,"description":"Enables ghcide-code-actions-fill-holes plugin","scope":"resource","type":"boolean"},"haskell.plugin.ghcide-code-actions-imports-exports.globalOn":{"default":true,"description":"Enables ghcide-code-actions-imports-exports plugin","scope":"resource","type":"boolean"},"haskell.plugin.ghcide-code-actions-type-signatures.globalOn":{"default":true,"description":"Enables ghcide-code-actions-type-signatures plugin","scope":"resource","type":"boolean"},"haskell.plugin.ghcide-completions.config.autoExtendOn":{"default":true,"markdownDescription":"Extends the import list automatically when completing a out-of-scope identifier","scope":"resource","type":"boolean"},"haskell.plugin.ghcide-completions.config.snippetsOn":{"default":true,"markdownDescription":"Inserts snippets when using code completions","scope":"resource","type":"boolean"},"haskell.plugin.ghcide-completions.globalOn":{"default":true,"description":"Enables ghcide-completions plugin","scope":"resource","type":"boolean"},"haskell.plugin.ghcide-hover-and-symbols.hoverOn":{"default":true,"description":"Enables ghcide-hover-and-symbols hover","scope":"resource","type":"boolean"},"haskell.plugin.ghcide-hover-and-symbols.symbolsOn":{"default":true,"description":"Enables ghcide-hover-and-symbols symbols","scope":"resource","type":"boolean"},"haskell.plugin.ghcide-type-lenses.config.mode":{"default":"always","description":"Control how type lenses are shown","enum":["always","exported","diagnostics"],"enumDescriptions":["Always displays type lenses of global bindings","Only display type lenses of exported global bindings","Follows error messages produced by GHC about missing signatures"],"scope":"resource","type":"string"},"haskell.plugin.ghcide-type-lenses.globalOn":{"default":true,"description":"Enables ghcide-type-lenses plugin","scope":"resource","type":"boolean"},"haskell.plugin.hlint.codeActionsOn":{"default":true,"description":"Enables hlint code actions","scope":"resource","type":"boolean"},"haskell.plugin.hlint.config.flags":{"default":[],"markdownDescription":"Flags used by hlint","scope":"resource","type":"array"},"haskell.plugin.hlint.diagnosticsOn":{"default":true,"description":"Enables hlint diagnostics","scope":"resource","type":"boolean"},"haskell.plugin.importLens.codeActionsOn":{"default":true,"description":"Enables importLens code actions","scope":"resource","type":"boolean"},"haskell.plugin.importLens.codeLensOn":{"default":true,"description":"Enables importLens code lenses","scope":"resource","type":"boolean"},"haskell.plugin.moduleName.globalOn":{"default":true,"description":"Enables moduleName plugin","scope":"resource","type":"boolean"},"haskell.plugin.ormolu.config.external":{"default":false,"markdownDescription":"Call out to an external \"ormolu\" executable, rather than using the bundled library","scope":"resource","type":"boolean"},"haskell.plugin.overloaded-record-dot.globalOn":{"default":true,"description":"Enables overloaded-record-dot plugin","scope":"resource","type":"boolean"},"haskell.plugin.pragmas-completion.globalOn":{"default":true,"description":"Enables pragmas-completion plugin","scope":"resource","type":"boolean"},"haskell.plugin.pragmas-disable.globalOn":{"default":true,"description":"Enables pragmas-disable plugin","scope":"resource","type":"boolean"},"haskell.plugin.pragmas-suggest.globalOn":{"default":true,"description":"Enables pragmas-suggest plugin","scope":"resource","type":"boolean"},"haskell.plugin.qualifyImportedNames.globalOn":{"default":true,"description":"Enables qualifyImportedNames plugin","scope":"resource","type":"boolean"},"haskell.plugin.rename.config.crossModule":{"default":false,"markdownDescription":"Enable experimental cross-module renaming","scope":"resource","type":"boolean"},"haskell.plugin.rename.globalOn":{"default":true,"description":"Enables rename plugin","scope":"resource","type":"boolean"},"haskell.plugin.retrie.globalOn":{"default":true,"description":"Enables retrie plugin","scope":"resource","type":"boolean"},"haskell.plugin.semanticTokens.config.classMethodToken":{"default":"method","description":"LSP semantic token type to use for typeclass methods","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.classToken":{"default":"class","description":"LSP semantic token type to use for typeclasses","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.dataConstructorToken":{"default":"enumMember","description":"LSP semantic token type to use for data constructors","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.functionToken":{"default":"function","description":"LSP semantic token type to use for functions","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.moduleToken":{"default":"namespace","description":"LSP semantic token type to use for modules","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.operatorToken":{"default":"operator","description":"LSP semantic token type to use for operators","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.patternSynonymToken":{"default":"macro","description":"LSP semantic token type to use for pattern synonyms","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.recordFieldToken":{"default":"property","description":"LSP semantic token type to use for record fields","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.typeConstructorToken":{"default":"enum","description":"LSP semantic token type to use for type constructors","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.typeFamilyToken":{"default":"interface","description":"LSP semantic token type to use for type families","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.typeSynonymToken":{"default":"type","description":"LSP semantic token type to use for type synonyms","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.typeVariableToken":{"default":"typeParameter","description":"LSP semantic token type to use for type variables","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.config.variableToken":{"default":"variable","description":"LSP semantic token type to use for variables","enum":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"],"enumDescriptions":["LSP Semantic Token Type: namespace","LSP Semantic Token Type: type","LSP Semantic Token Type: class","LSP Semantic Token Type: enum","LSP Semantic Token Type: interface","LSP Semantic Token Type: struct","LSP Semantic Token Type: typeParameter","LSP Semantic Token Type: parameter","LSP Semantic Token Type: variable","LSP Semantic Token Type: property","LSP Semantic Token Type: enumMember","LSP Semantic Token Type: event","LSP Semantic Token Type: function","LSP Semantic Token Type: method","LSP Semantic Token Type: macro","LSP Semantic Token Type: keyword","LSP Semantic Token Type: modifier","LSP Semantic Token Type: comment","LSP Semantic Token Type: string","LSP Semantic Token Type: number","LSP Semantic Token Type: regexp","LSP Semantic Token Type: operator","LSP Semantic Token Type: decorator"],"scope":"resource","type":"string"},"haskell.plugin.semanticTokens.globalOn":{"default":false,"description":"Enables semanticTokens plugin","scope":"resource","type":"boolean"},"haskell.plugin.splice.globalOn":{"default":true,"description":"Enables splice plugin","scope":"resource","type":"boolean"},"haskell.plugin.stan.globalOn":{"default":false,"description":"Enables stan plugin","scope":"resource","type":"boolean"}}},"commands":[{"command":"haskell.commands.importIdentifier","title":"Haskell: Import identifier","description":"Imports a function or type based on a Hoogle search"},{"command":"haskell.commands.restartServer","title":"Haskell: Restart Haskell LSP server","description":"Restart the Haskell LSP server"},{"command":"haskell.commands.startServer","title":"Haskell: Start Haskell LSP server","description":"Start the Haskell LSP server"},{"command":"haskell.commands.stopServer","title":"Haskell: Stop Haskell LSP server","description":"Stop the Haskell LSP server"}]},"scripts":{"vscode:prepublish":"webpack --mode production","webpack":"webpack --mode none","watch":"webpack --mode development --watch","lint":"eslint -c .eslintrc.json --ext .ts src","lint-fix":"eslint --fix -c .eslintrc.json --ext .ts src","push-tag":"git tag -a $npm_package_version -m \"Version $npm_package_version\" && git push origin $npm_package_version","pretest":"tsc --alwaysStrict -p ./","format":"prettier . --write","test":"node ./out/test/runTest.js"},"husky":{"hooks":{"pre-commit":"pretty-quick --staged"}},"devDependencies":{"@types/glob":"^8.1.0","@types/mocha":"^10.0.6","@types/node":"^20.12.8","@types/vscode":"^1.88.0","@types/which":"^3.0.3","@typescript-eslint/eslint-plugin":"^7.0.0","@typescript-eslint/parser":"^6.21.0","@vscode/test-electron":"^2.3.9","eslint":"^8.57.0","eslint-webpack-plugin":"^4.1.0","glob":"^10.3.12","husky":"^9.0.11","mocha":"^10.4.0","prettier":"^3.2.5","ts-loader":"^9.5.1","typescript":"^5.4.5","webpack":"^5.91.0","webpack-cli":"^5.1.1"},"extensionDependencies":["justusadam.language-haskell"],"dependencies":{"ts-pattern":"^5.1.1","vscode-languageclient":"^7.0.0","which":"^4.0.0"}},"location":{"$mid":1,"path":"/home/linus/.vscode/extensions/haskell.haskell-2.4.4","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","publisherDisplayName":"Haskell","metadata":{"installedTimestamp":1722852513182,"pinned":false,"source":"gallery","id":"aead9e6c-3483-4ce4-a09f-843e25ce696f","publisherId":"15dd703a-8dc9-4836-8bca-956652720b1c","publisherDisplayName":"Haskell","targetPlatform":"undefined","updated":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false},"isValid":true,"validations":[]},{"type":1,"identifier":{"id":"justusadam.language-haskell","uuid":"270c1d3b-a657-446f-83b8-ab32fd7af006"},"manifest":{"name":"language-haskell","displayName":"Haskell Syntax Highlighting","description":"Syntax support for the Haskell programming language.","version":"3.6.0","publisher":"justusadam","engines":{"vscode":"^1.0.0"},"icon":"images/logo.png","galleryBanner":{"color":"#293845","theme":"dark"},"files":["src/*","syntaxes/*.json","images/","README.md","LICENSE","*-configuration.json","tsconfig.json","CHANGELOG.md"],"keywords":["language","haskell","highlight","syntax"],"license":"BSD-3-Clause","homepage":"https://github.com/JustusAdam/language-haskell","repository":{"type":"git","url":"https://github.com/JustusAdam/language-haskell.git"},"bugs":{"url":"https://github.com/JustusAdam/language-haskell/issues","email":"dev@justus.science"},"categories":["Programming Languages"],"activationEvents":["onLanguage:haskell"],"main":"./out/src/extension","contributes":{"configuration":{"type":"object","title":"Haskell configuration","properties":{"haskell.indentationRules.enabled":{"type":"boolean","default":true,"description":"Set to 'false' to disable automatically increasing indent on newlines after '=', 'do', 'where' etc."}}},"languages":[{"id":"haskell","aliases":["Haskell","haskell"],"extensions":[".hs",".hsig","hs-boot"],"configuration":"./haskell-configuration.json"},{"id":"cabal","aliases":["Cabal","cabal"],"extensions":[".cabal"],"configuration":"./cabal-configuration.json"},{"id":"C2Hs","aliases":["C2Hs","c2hs"],"extensions":[".chs"],"configuration":"./C2Hs-configuration.json"},{"id":"Hsc2Hs","aliases":["Hsc2Hs","HsC2Hs","hsc2hs"],"extensions":[".hsc"],"configuration":"./Hsc2Hs-configuration.json"},{"id":"literate haskell","aliases":["Literate Haskell","literate Haskell"],"extensions":[".lhs"],"configuration":"./literate-haskell-configuration.json"},{"id":"yaml","aliases":["YAML","yaml"],"filenames":["stack.yaml.lock"]},{"id":"alex","aliases":["Alex","alex","Haskell Alex"],"extensions":[".x"],"configuration":"./haskell-configuration.json"},{"id":"happy","aliases":["Happy","happy","Haskell Happy"],"extensions":[".y"],"configuration":"./haskell-configuration.json"}],"grammars":[{"language":"haskell","scopeName":"source.haskell","path":"./syntaxes/haskell.json"},{"language":"cabal","scopeName":"source.cabal","path":"./syntaxes/cabal.json"},{"language":"C2Hs","scopeName":"source.c2hs","path":"./syntaxes/C2Hs.json"},{"language":"Hsc2Hs","scopeName":"source.hsc","path":"./syntaxes/Hsc2Hs.json"},{"language":"literate haskell","scopeName":"text.tex.latex.haskell","path":"./syntaxes/literateHaskell.json"},{"language":"alex","scopeName":"source.haskell.alex","path":"./syntaxes/alex.json"},{"language":"happy","scopeName":"source.haskell.happy","path":"./syntaxes/happy.json"},{"scopeName":"markdown.haskell.codeblock","path":"./syntaxes/codeblock-haskell.json","injectTo":["text.html.markdown"],"embeddedLanguages":{"meta.embedded.block.haskell":"haskell"}},{"scopeName":"markdown.lhaskell.codeblock","path":"./syntaxes/codeblock-literate-haskell.json","injectTo":["text.html.markdown"],"embeddedLanguages":{"meta.embedded.block.lhaskell":"lhaskell"}},{"scopeName":"markdown.cabal.codeblock","path":"./syntaxes/codeblock-cabal.json","injectTo":["text.html.markdown"],"embeddedLanguages":{"meta.embedded.block.cabal":"cabal"}}]},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -p ./","postinstall":"node ./node_modules/vscode/bin/install"},"devDependencies":{"js-yaml":"^3.13.1","npm":"^6.14.5","typescript":"^2.6.2","vsce":"^1.75.0","vscode":"^1.0.0"}},"location":{"$mid":1,"path":"/home/linus/.vscode/extensions/justusadam.language-haskell-3.6.0","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","publisherDisplayName":"Justus Adam","metadata":{"installedTimestamp":1722852513184,"pinned":false,"source":"gallery","id":"270c1d3b-a657-446f-83b8-ab32fd7af006","publisherId":"2c93d4f5-4858-4c44-9577-e3790e9f20cf","publisherDisplayName":"Justus Adam","targetPlatform":"undefined","updated":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false},"isValid":true,"validations":[]}]}